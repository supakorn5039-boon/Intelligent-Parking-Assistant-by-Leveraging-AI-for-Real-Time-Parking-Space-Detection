import { Platform, processColor } from 'react-native';
const RCTToast = Platform.select({
  ios: () => require('./NativeSimpleToast').default,
  android: () => require('react-native').ToastAndroid,
  default: () => {
    throw new Error('RNSimpleToast: unsupported platform');
  }
})();
const constantsSource = Platform.select({
  ios: () => require('./NativeSimpleToast').default.getConstants(),
  android: () => require('react-native').ToastAndroid,
  default: () => {
    throw new Error('RNSimpleToast: unsupported platform');
  }
})();
export default {
  SHORT: constantsSource.SHORT,
  LONG: constantsSource.LONG,
  TOP: constantsSource.TOP,
  BOTTOM: constantsSource.BOTTOM,
  CENTER: constantsSource.CENTER,
  show(message, durationSeconds) {
    let styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    RCTToast.show(message, durationSeconds ?? constantsSource.SHORT, processColors(styles));
  },
  showWithGravity(message, durationSeconds, gravity) {
    let styles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    RCTToast.showWithGravity(message, durationSeconds ?? constantsSource.SHORT, gravity, processColors(styles));
  },
  showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset) {
    let styles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    RCTToast.showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset, processColors(styles));
  }
};
function processColors(styles) {
  if (Platform.OS === 'ios') {
    return {
      // the types are not 100% correct
      messageColor: processColor(styles.textColor),
      backgroundColor: processColor(styles.backgroundColor)
    };
  }
  return {};
}
//# sourceMappingURL=index.js.map