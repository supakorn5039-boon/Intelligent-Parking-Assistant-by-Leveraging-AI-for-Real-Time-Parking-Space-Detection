// @flow

import type {
  AccessibilityActionInfo,
  AccessibilityPropsAndroid,
  AccessibilityRole,
  AccessibilityState,
  AccessibilityValue,
  Insets,
  LayoutChangeEvent,
  GestureResponderEvent,
  StyleProp,
  ViewStyle,
  View,
} from "react-native";
import type * as React from "react";
import type type { axisY as AxisY } from "./Stacks_types.gen";
import type type { flex as Flex } from "./Stacks_types.gen";
import type type { responsiveProp as ResponsiveProp } from "./Stacks_types.gen";
export type Props = {
  +accessibilityActions?: AccessibilityActionInfo[],
  +accessibilityElementsHidden?: boolean,
  +accessibilityHint?: string,
  +accessibilityIgnoresInvertColors?: boolean,
  +accessibilityLabel?: string,
  +accessibilityLiveRegion?: $PropertyType<
    AccessibilityPropsAndroid,
    "accessibilityLiveRegion"
  >,
  +accessibilityRole?: AccessibilityRole,
  +accessibilityState?: AccessibilityState,
  +accessibilityValue?: AccessibilityValue,
  +accessibilityViewIsModal?: boolean,
  +accessible?: boolean,
  +alignX?: ResponsiveProp<
    "around" | "between" | "center" | "evenly" | "left" | "right"
  >,
  +alignY?: ResponsiveProp<AxisY>,
  +children: React.Node,
  +collapsable?: boolean,
  +collapseBelow?: string,
  +defaultWidth?: ResponsiveProp<Flex>,
  +height?: ResponsiveProp<Flex>,
  +hitSlop?: Insets,
  +importantForAccessibility?: "auto" | "no" | "no-hide-descendants" | "yes",
  +margin?: ResponsiveProp<number>,
  +marginBottom?: ResponsiveProp<number>,
  +marginEnd?: ResponsiveProp<number>,
  +marginLeft?: ResponsiveProp<number>,
  +marginRight?: ResponsiveProp<number>,
  +marginStart?: ResponsiveProp<number>,
  +marginTop?: ResponsiveProp<number>,
  +marginX?: ResponsiveProp<number>,
  +marginY?: ResponsiveProp<number>,
  +nativeID?: string,
  +needsOffscreenAlphaCompositing?: boolean,
  +onAccessibilityEscape?: () => void,
  +onAccessibilityTap?: () => void,
  +onLayout?: (event: LayoutChangeEvent) => void,
  +onMagicTap?: () => void,
  +onMouseDown?: (event: MouseEvent) => void,
  +onMouseEnter?: (event: MouseEvent) => void,
  +onMouseLeave?: (event: MouseEvent) => void,
  +onMouseMove?: (event: MouseEvent) => void,
  +onMouseOut?: (event: MouseEvent) => void,
  +onMouseOver?: (event: MouseEvent) => void,
  +onMouseUp?: (event: MouseEvent) => void,
  +onMoveShouldSetResponder?: (event: GestureResponderEvent) => boolean,
  +onMoveShouldSetResponderCapture?: (event: GestureResponderEvent) => boolean,
  +onResponderEnd?: (event: GestureResponderEvent) => void,
  +onResponderGrant?: (event: GestureResponderEvent) => void,
  +onResponderMove?: (event: GestureResponderEvent) => void,
  +onResponderReject?: (event: GestureResponderEvent) => void,
  +onResponderRelease?: (event: GestureResponderEvent) => void,
  +onResponderStart?: (event: GestureResponderEvent) => void,
  +onResponderTerminate?: (event: GestureResponderEvent) => void,
  +onResponderTerminationRequest?: (event: GestureResponderEvent) => boolean,
  +onStartShouldSetResponder?: (event: GestureResponderEvent) => boolean,
  +onStartShouldSetResponderCapture?: (event: GestureResponderEvent) => boolean,
  +padding?: ResponsiveProp<number>,
  +paddingBottom?: ResponsiveProp<number>,
  +paddingEnd?: ResponsiveProp<number>,
  +paddingLeft?: ResponsiveProp<number>,
  +paddingRight?: ResponsiveProp<number>,
  +paddingStart?: ResponsiveProp<number>,
  +paddingTop?: ResponsiveProp<number>,
  +paddingX?: ResponsiveProp<number>,
  +paddingY?: ResponsiveProp<number>,
  +pointerEvents?: "auto" | "box-none" | "box-only" | "none",
  +removeClippedSubviews?: boolean,
  +renderToHardwareTextureAndroid?: boolean,
  +reverse?: boolean,
  +shouldRasterizeIOS?: boolean,
  +space?: ResponsiveProp<number>,
  +style?: StyleProp<ViewStyle>,
  +testID?: string,
  +viewRef?: React.RefObject<View>,
  ...
};
declare export var make: React.ComponentType<Props>;
