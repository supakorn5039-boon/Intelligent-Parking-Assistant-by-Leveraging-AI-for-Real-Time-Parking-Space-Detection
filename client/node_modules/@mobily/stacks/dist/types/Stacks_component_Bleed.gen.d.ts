import { AccessibilityActionInfo, AccessibilityPropsAndroid, AccessibilityRole, AccessibilityState, AccessibilityValue, Insets, LayoutChangeEvent, GestureResponderEvent, StyleProp, ViewStyle, View } from 'react-native';
import * as React from 'react';
import type { responsiveProp as ResponsiveProp } from './Stacks_types.gen';
export declare type Props = {
    readonly accessibilityActions?: AccessibilityActionInfo[];
    readonly accessibilityElementsHidden?: boolean;
    readonly accessibilityHint?: string;
    readonly accessibilityIgnoresInvertColors?: boolean;
    readonly accessibilityLabel?: string;
    readonly accessibilityLiveRegion?: AccessibilityPropsAndroid['accessibilityLiveRegion'];
    readonly accessibilityRole?: AccessibilityRole;
    readonly accessibilityState?: AccessibilityState;
    readonly accessibilityValue?: AccessibilityValue;
    readonly accessibilityViewIsModal?: boolean;
    readonly accessible?: boolean;
    readonly bottom?: ResponsiveProp<number>;
    readonly children: React.ReactNode;
    readonly collapsable?: boolean;
    readonly hitSlop?: Insets;
    readonly horizontal?: ResponsiveProp<number>;
    readonly importantForAccessibility?: 'auto' | 'no' | 'no-hide-descendants' | 'yes';
    readonly left?: ResponsiveProp<number>;
    readonly nativeID?: string;
    readonly needsOffscreenAlphaCompositing?: boolean;
    readonly onAccessibilityEscape?: () => void;
    readonly onAccessibilityTap?: () => void;
    readonly onLayout?: (event: LayoutChangeEvent) => void;
    readonly onMagicTap?: () => void;
    readonly onMouseDown?: (event: MouseEvent) => void;
    readonly onMouseEnter?: (event: MouseEvent) => void;
    readonly onMouseLeave?: (event: MouseEvent) => void;
    readonly onMouseMove?: (event: MouseEvent) => void;
    readonly onMouseOut?: (event: MouseEvent) => void;
    readonly onMouseOver?: (event: MouseEvent) => void;
    readonly onMouseUp?: (event: MouseEvent) => void;
    readonly onMoveShouldSetResponder?: (event: GestureResponderEvent) => boolean;
    readonly onMoveShouldSetResponderCapture?: (event: GestureResponderEvent) => boolean;
    readonly onResponderEnd?: (event: GestureResponderEvent) => void;
    readonly onResponderGrant?: (event: GestureResponderEvent) => void;
    readonly onResponderMove?: (event: GestureResponderEvent) => void;
    readonly onResponderReject?: (event: GestureResponderEvent) => void;
    readonly onResponderRelease?: (event: GestureResponderEvent) => void;
    readonly onResponderStart?: (event: GestureResponderEvent) => void;
    readonly onResponderTerminate?: (event: GestureResponderEvent) => void;
    readonly onResponderTerminationRequest?: (event: GestureResponderEvent) => boolean;
    readonly onStartShouldSetResponder?: (event: GestureResponderEvent) => boolean;
    readonly onStartShouldSetResponderCapture?: (event: GestureResponderEvent) => boolean;
    readonly pointerEvents?: 'auto' | 'box-none' | 'box-only' | 'none';
    readonly removeClippedSubviews?: boolean;
    readonly renderToHardwareTextureAndroid?: boolean;
    readonly right?: ResponsiveProp<number>;
    readonly shouldRasterizeIOS?: boolean;
    readonly space?: ResponsiveProp<number>;
    readonly style?: StyleProp<ViewStyle>;
    readonly testID?: string;
    readonly top?: ResponsiveProp<number>;
    readonly vertical?: ResponsiveProp<number>;
    readonly viewRef?: React.RefObject<View>;
};
export declare const make: React.ComponentType<Props>;
